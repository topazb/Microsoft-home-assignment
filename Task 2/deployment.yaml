AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for VPC, EC2, RDS, and Secrets Manager infrastructure"

Parameters:
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: "CIDR block for the VPC"

  PublicSubnetCidrA:
    Type: String
    Default: "10.0.1.0/24"
    Description: "CIDR block for the public subnet A"

  PrivateSubnetCidrA:
    Type: String
    Default: "10.0.2.0/24"
    Description: "CIDR block for the private subnet A"

  PublicSubnetCidrB:
    Type: String
    Default: "10.0.3.0/24"
    Description: "CIDR block for the public subnet B"

  PrivateSubnetCidrB:
    Type: String
    Default: "10.0.4.0/24"
    Description: "CIDR block for the private subnet B"

  AmiId:
    Type: String
    Description: "AMI ID for EC2 instance"

  InstanceType:
    Type: String
    Default: "t2.micro"
    Description: "EC2 instance type"

  DbName:
    Type: String
    Default: "mydatabase"
    Description: "Database name for RDS instance"

  DbUsername:
    Type: String
    Default: "admin"
    Description: "Database username for RDS instance"

  DbPassword:
    Type: String
    NoEcho: true
    Description: "Database password for RDS instance"

Resources:
  # VPC
  MyVpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "MyVpc"

  # Public Subnets
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PublicSubnetCidrA
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnetA"

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PublicSubnetCidrB
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnetB"

  # Private Subnets
  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PrivateSubnetCidrA
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "PrivateSubnetA"

  PrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PrivateSubnetCidrB
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "PrivateSubnetB"

  # Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: "MyInternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref InternetGateway

  # Route Table for Public Subnets
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: "PublicRouteTable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref MyVpc
      GroupDescription: "Allow HTTP access to EC2 instances"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  DatabaseSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref MyVpc
      GroupDescription: "Allow MySQL access from EC2 instances"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstanceSecurityGroup

  # EC2 Instance
  WebInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: "WebInstance"

  # RDS Subnet Group
  DbSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS DB"
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      DBSubnetGroupName: "mydatabase-subnet-group"

  # RDS Instance
  MyDatabase:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBName: !Ref DbName
      Engine: "mysql"
      EngineVersion: "8.0"
      DBInstanceClass: "db.t3.small"
      AllocatedStorage: "20"
      MasterUsername: !Ref DbUsername
      MasterUserPassword: !Ref DbPassword
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DbSubnetGroup
      PubliclyAccessible: false
      DeletionPolicy: Retain√ç

  # Secrets Manager
  DbPasswordSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "db-password-secret"
      SecretString: !Sub |
        {"username": "${DbUsername}", "password": "${DbPassword}"}

Outputs:
  VpcId:
    Description: "VPC ID"
    Value: !Ref MyVpc

  WebInstancePublicIp:
    Description: "Public IP address of the EC2 instance"
    Value: !GetAtt WebInstance.PublicIp

  RdsEndpoint:
    Description: "RDS instance endpoint"
    Value: !GetAtt MyDatabase.Endpoint.Address

  DbPasswordSecretArn:
    Description: "ARN of the Secrets Manager secret for DB password"
    Value: !Ref DbPasswordSecret
